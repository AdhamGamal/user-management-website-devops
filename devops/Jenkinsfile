pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/AdhamGamal/user-management-website-devops.git'
        BRANCH = 'main'
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        SSH_CREDENTIALS = 'ssh-credentials'
        DROPLET_IP = '104.248.40.160'
        BACKEND_IMAGE = 'adhamgamal22/add-user-backend:1.0'
        FRONTEND_IMAGE = 'adhamgamal22/add-user-frontend:1.0'
    }

    stages {
        stage('Step 1: Checkout Code from GitHub') { 
            steps {
                echo 'üöÄ Checking out code from GitHub...'
                git branch: "${BRANCH}", url: "${GIT_REPO}"
                echo '‚úÖ Code checkout completed.'
            }
        }

        stage('Step 2: Parallel Builds') {
            parallel {
                stage('Build Backend') {
                    steps {
                        script {
                            try {
                                echo 'üöÄ Setting up backend...'
                                dir('backend') {
                                    sh 'npm install'
                                    echo '‚úÖ Backend dependencies installed.'
                                }
                                echo 'üê≥ Building backend Docker image...'
                                sh "docker build -t ${BACKEND_IMAGE} -f devops/Dockerfile.backend ."
                                echo '‚úÖ Backend Docker image built.'

                                echo 'üîê Logging into Docker Hub...'
                                withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                    sh """
                                    echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                                    echo 'üöÄ Pushing backend image to Docker Hub...'
                                    docker push ${BACKEND_IMAGE}
                                    """
                                }
                                echo '‚úÖ Backend image pushed to Docker Hub.'
                            } catch (Exception e) {
                                error "‚ùå Backend build failed: ${e.message}"
                            }
                        }
                    }
                }

                stage('Build Frontend') {
                    steps {
                        script {
                            try {
                                echo 'üöÄ Setting up frontend...'
                                dir('frontend') {
                                    sh 'npm install'
                                    sh 'npm run build'
                                    echo '‚úÖ Frontend build completed.'
                                }
                                echo 'üê≥ Building frontend Docker image...'
                                sh "docker build -t ${FRONTEND_IMAGE} -f devops/Dockerfile.frontend ."
                                echo '‚úÖ Frontend Docker image built.'

                                echo 'üîê Logging into Docker Hub...'
                                withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                    sh """
                                    echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                                    echo 'üöÄ Pushing frontend image to Docker Hub...'
                                    docker push ${FRONTEND_IMAGE}
                                    """
                                }
                                echo '‚úÖ Frontend image pushed to Docker Hub.'
                            } catch (Exception e) {
                                error "‚ùå Frontend build failed: ${e.message}"
                            }
                        }
                    }
                }
            }
        }

        stage('Step 3: Deploy Application with Ansible') { 
            steps {
                script {
                    echo 'üîë Setting up SSH for deployment...'
                    sshagent(['ssh-credentials']) {
                        sh """
                        echo 'üöÄ Running Ansible playbook...'
                        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i devops/inventory.ini devops/deploy.yml \
                        --private-key \$SSH_AUTH_SOCK
                        """
                    }
                    echo '‚úÖ Deployment completed!'
                }
            }
        }
    }
}