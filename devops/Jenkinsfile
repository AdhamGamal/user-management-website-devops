pipeline {
    agent any

    environment {
        GIT_REPO = 'https://github.com/AdhamGamal/user-management-website-devops.git'
        BRANCH = 'main'
        DOCKER_HUB_CREDENTIALS = 'dockerhub-credentials'
        SSH_CREDENTIALS = 'ssh-credentials'
        DROPLET_IP = '207.154.204.90'
        BACKEND_IMAGE = 'adhamgamal22/add-user-backend:1.0'
        FRONTEND_IMAGE = 'adhamgamal22/add-user-frontend:1.0'
    }

    stages {
        stage('Step 1: Checkout Code from GitHub') { 
            steps {
                echo 'Checking out code from GitHub...'
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Step 2: Install Dependencies & Build Backend') { 
            steps {
                script {
                    try {
                        echo 'Installing dependencies & building backend...'
                        dir('backend') {
                            sh 'npm install'
                            echo 'Backend setup completed. No build step required.'
                        }
                    } catch (Exception e) {
                        error "Backend build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Step 3: Install Dependencies & Build Frontend') { 
            steps {
                script {
                    try {
                        echo 'Installing dependencies & building frontend...'
                        dir('frontend') {
                            sh 'npm install'
                            sh 'npm run build'
                        }
                    } catch (Exception e) {
                        error "Frontend build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Step 4: Build Backend Docker Image') { 
            steps {
                script {
                    echo 'Building backend Docker image...'
                    sh "docker build -t ${BACKEND_IMAGE} -f devops/Dockerfile.backend ."
                }
            }
        }

        stage('Step 5: Build Frontend Docker Image') { 
            steps {
                script {
                    echo 'Building frontend Docker image...'
                    sh "docker build -t ${FRONTEND_IMAGE} -f devops/Dockerfile.frontend ."
                }
            }
        }

        stage('Step 6: Push Backend Image to Docker Hub') { 
            steps {
                script {
                    echo 'Pushing backend Docker image to Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                        docker push ${BACKEND_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Step 7: Push Frontend Image to Docker Hub') { 
            steps {
                script {
                    echo 'Pushing frontend Docker image to Docker Hub...'
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                        echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin
                        docker push ${FRONTEND_IMAGE}
                        """
                    }
                }
            }
        }

        stage('Step 8: Deploy Application with Ansible') { 
            steps {
                script {
                    sshagent(['ssh-credentials']) {
                        sh """
                        echo 'Running Ansible playbook...'
                        ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i devops/inventory.ini devops/deploy.yml \
                        --private-key \$SSH_AUTH_SOCK
                        """
                    }
                }
            }
        }
    }
}
